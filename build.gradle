plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'idea'
}

version = "${mod_version}"
group = 'igentuman.nc'
archivesBaseName = "NuclearCraft-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${mappings_version}-${mc_version}"
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', 'nuclearcraft'

            mods {
                nuclearcraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', 'nuclearcraft'

            mods {
                nuclearcraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'nuclearcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                nuclearcraft {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://jitpack.io" }
    maven { url "https://www.cursemaven.com" }
    maven { url "https://squiddev.cc/maven/" }
    maven { url "https://maven.mcmoddev.com" }
    maven { url "https://maven.tterrag.com/" }
    maven { url "https://modmaven.dev/" }
    maven { url "https://maven.firstdarkdev.xyz/snapshots/" }
    maven { url "https://maven.tterrag.com/" }
    maven { url "https://maven.firstdarkdev.xyz/snapshots/" }
    maven { url "https://maven.architectury.dev" }
    maven { url "https://maven.saps.dev/minecraft" }
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly fg.deobf("com.gregtechceu.gtceu:gtceu-forge-${mc_version}:${gtceu_version}") {
        transitive = false
    }
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    //runtimeOnly fg.deobf("curse.maven:spark-361579:4738952")
/*    implementation fg.deobf("com.lowdragmc.ldlib:ldlib-forge-${mc_version}:${ldlib_version}") {
        transitive = false
    }
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}") {
        transitive = false
    }*/

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    implementation fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    //implementation fg.deobf("curse.maven:xnet-gases-383182:4536820")
    //implementation fg.deobf("curse.maven:xnet-260912:4462366")
    //implementation fg.deobf("curse.maven:mcjtylib-233105:4501791")
    //implementation fg.deobf("curse.maven:rftools-base-326041:4474182")
    runtimeOnly fg.deobf("curse.maven:ctm-267602:4393695")

    compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}:api") {
        transitive = false
    }
    runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }

    implementation fg.deobf("curse.maven:cc-tweaked-282001:4630524")

    //implementation fg.deobf("curse.maven:kubejs-238086:4931520")
    //implementation fg.deobf("curse.maven:rhino-416294:4805925")
    //implementation fg.deobf("curse.maven:architectury-api-419699:4555749")

    runtimeOnly fg.deobf("curse.maven:nbtedit-reborn-678133:4420565")
    //runtimeOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${mc_version}:${ct_version}")

    implementation fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}")
    //compileOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:api")

    //compileOnly("cc.tweaked:cc-tweaked-${mc_version}-core-api:${cc_version}")
    //compileOnly(fg.deobf("cc.tweaked:cc-tweaked-${mc_version}-forge-api:${cc_version}"))
    //runtimeOnly(fg.deobf("cc.tweaked:cc-tweaked-${mc_version}-forge:${cc_version}"))

    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "nuclearcraft",
                "Specification-Vendor"    : "nuclearcraftsareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "nuclearcraftsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

mixin {
    add sourceSets.main, "nuclearcraft.refmap.json"
    config "nuclearcraft.mixins.json"
}

jar.enabled = false

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

configurations {
    shaded {
        transitive = false
    }
}

shadowJar {
    finalizedBy 'reobfShadowJar'

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title"   : "NuclearCraft",
                "Specification-Vendor"  : "igentuman",
                "Specification-Version" : "${project.version}",
                "Implementation-Title"  : "${project.name}",
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" : "igentuman",
                "MixinConfigs"          : "nuclearcraft.mixins.json"
        ])
    }

    configurations = [project.configurations.shaded]
    archiveClassifier = null
}



reobf {
    shadowJar {}
}

afterEvaluate {
    tasks.reobfJar.enabled = false
}

tasks.assemble.dependsOn reobfShadowJar